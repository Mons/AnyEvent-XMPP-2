#!/opt/perl/bin/perl

use strict;
use AnyEvent::XMPP::IM;
use AnyEvent::XMPP::Util qw/prep_bare_jid/;
$AnyEvent::XMPP::Stream::DEBUG = 1;

my $cv = AnyEvent->condvar;
my $im = AnyEvent::XMPP::IM->new;

my $disco  = $im->add_ext ('Disco');
my $roster = $im->add_ext ('Roster');
my $prese  = $im->add_ext ('Presence');

$roster->auto_fetch;
$prese->set_default ('available', 'fetching stuff', -10);

#     <c hash="sha-1" node="http://tkabber.jabber.ru/" ver="3Ms9tfXJFs4QHlrJScnZOnQpBSU=" xmlns="http://jabber.org/protocol/caps"/>

$im->reg_cb (
   recv_presence => sub {
      my ($self, $node) = @_;

      if ($node->meta->{presence}) {
         if (my ($c) = $node->find ('http://jabber.org/protocol/caps' => 'c')) {
            if ($c->attr ('ver') =~ /=$/) {
               $disco->request_info (
                  $node->meta->{dest}, $node->attr ('from'), $node->attr ('node'), sub {
                  my ($disco, $info, $error) = @_;

                  if ($error) {
                     warn "Couldn't fetch info from "
                           . $node->attr ('from') . ": "
                           . $error->string . "\n";
                     return;
                  }

                  my $fn = "fetch_disco_cap." . prep_bare_jid ($node->attr ('from')) . ".ifo";

                  open my $discoout, ">", $fn or die "Couldn't open file '$fn' for capa: $!";
                  print $discoout ($node->raw_string . "\n\n");
                  print $discoout $info->as_verification_string . "\n\n";
                  print $discoout $info->as_verification_hash . "\n\n";
                  print $discoout $info->{xmlnode}->raw_string . "\n";
                  close $discoout;
                  print "written $fn\n";
               });
            }
         }
      }
   }
);

$im->add_account ($ARGV[0] || 'elmex@ejabberd.test', $ARGV[1] || 'lolfe');

$im->update_connections;

$cv->recv;
